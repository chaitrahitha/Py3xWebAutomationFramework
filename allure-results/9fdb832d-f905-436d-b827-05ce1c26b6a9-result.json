{"name": "test_vwo_login_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test.vwoLoginTests.test_vwo_login_pf.TestVWOLogin object at 0x000001FE9F25B7D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c2c3fc096996c04f725f9d226b4f0ff7\")>\n\n    @pytest.mark.usefixtures(\"setup\")\n    @pytest.mark.qa\n    def test_vwo_login_positive(self, setup):\n        LOGGER = logging.getLogger(__name__)\n        LOGGER.info(\"Starting the Testcase\")\n        driver = setup\n        driver.get(Constants.app_url())\n        login_page = LoginPage(driver)\n        login_page.login_to_vwo(user=self.username, pwd=self.password)\n        time.sleep(5)\n        dashboard_page = DashboardPage(driver)\n>       username = dashboard_page.user_logged_in_text()\n\ntests\\test\\vwoLoginTests\\test_vwo_login_pf.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\pageObjects\\pageFactory\\dashboardPage_pf.py:18: in user_logged_in_text\n    webdriver_wait_url(driver=self.driver, timeout=10)\ntests\\utils\\common_utils.py:16: in webdriver_wait_url\n    WebDriverWait(driver=driver, timeout=timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c2c3fc096996c04f725f9d226b4f0ff7\")>\nmethod = <function url_changes.<locals>._predicate at 0x000001FE9F278F40>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1726210344518, "stop": 1726210363305, "uuid": "45a4d432-64d3-4bf1-8c9e-e73b89c94fb6", "historyId": "6109efe96f903dc20f391c57b0ade122", "testCaseId": "6109efe96f903dc20f391c57b0ade122", "fullName": "tests.test.vwoLoginTests.test_vwo_login_pf.TestVWOLogin#test_vwo_login_positive", "labels": [{"name": "epic", "value": "VWO App"}, {"name": "feature", "value": "Login Test"}, {"name": "tag", "value": "qa"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.test.vwoLoginTests"}, {"name": "suite", "value": "test_vwo_login_pf"}, {"name": "subSuite", "value": "TestVWOLogin"}, {"name": "host", "value": "Chaitra"}, {"name": "thread", "value": "10016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test.vwoLoginTests.test_vwo_login_pf"}]}