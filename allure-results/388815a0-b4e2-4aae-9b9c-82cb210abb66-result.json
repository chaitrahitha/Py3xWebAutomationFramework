{"name": "test_vwo_login_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: MicrosoftEdge=128.0.2739.67)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7BE953A22+10594]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8F0449+323353]\n\t(No symbol) [0x00007FF7BE70F16E]\n\t(No symbol) [0x00007FF7BE6EAB19]\n\t(No symbol) [0x00007FF7BE77E7CB]\n\t(No symbol) [0x00007FF7BE79145A]\n\t(No symbol) [0x00007FF7BE7777E3]\n\t(No symbol) [0x00007FF7BE74B3EC]\n\t(No symbol) [0x00007FF7BE74A8CD]\n\t(No symbol) [0x00007FF7BE74AFB1]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7BEADE4C4+918756]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7BE87C9BF+54575]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7BE86F557+199]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7BEADD24D+914029]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8F7ED1+354721]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8F4384+339540]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8F44B9+339849]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8EAD7C+301132]\n\tBaseThreadInitThunk [0x00007FFC337A257D+29]\n\tRtlUserThreadStart [0x00007FFC348CAF28+40]", "trace": "self = <tests.test.vwoLoginTests.test_vwo_login_pf.TestVWOLogin object at 0x0000023329CF01D0>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"0a033eb94d31f770c95c3ee2fcbfcc99\")>\n\n    @pytest.mark.usefixtures(\"setup\")\n    @pytest.mark.qa\n    def test_vwo_login_positive(self, setup):\n        LOGGER = logging.getLogger(__name__)\n        LOGGER.info(\"Starting the Testcase\")\n        driver = setup\n        driver.get(Constants.app_url())\n        login_page = LoginPage(driver)\n        login_page.login_to_vwo(username=self.username, pwd=self.password)\n        dashboard_page = DashboardPage(driver)\n>       username = dashboard_page.user_logged_in_text()\n\ntests\\test\\vwoLoginTests\\test_vwo_login_pf.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\pageObjects\\pageFactory\\dashboardPage_pf.py:19: in user_logged_in_text\n    return self.username_logged_in.get_text()\n.venv\\Lib\\site-packages\\seleniumpagefactory\\Pagefactory.py:58: in __getattr__\n    element = WebDriverWait(self.driver, self.timeout).until(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023326F3E4B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...8EAD7C+301132]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC337A257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC348CAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: MicrosoftEdge=128.0.2739.67)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7BE953A22+10594]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8F0449+323353]\nE       \t(No symbol) [0x00007FF7BE70F16E]\nE       \t(No symbol) [0x00007FF7BE6EAB19]\nE       \t(No symbol) [0x00007FF7BE77E7CB]\nE       \t(No symbol) [0x00007FF7BE79145A]\nE       \t(No symbol) [0x00007FF7BE7777E3]\nE       \t(No symbol) [0x00007FF7BE74B3EC]\nE       \t(No symbol) [0x00007FF7BE74A8CD]\nE       \t(No symbol) [0x00007FF7BE74AFB1]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7BEADE4C4+918756]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7BE87C9BF+54575]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7BE86F557+199]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7BEADD24D+914029]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8F7ED1+354721]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8F4384+339540]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8F44B9+339849]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BE8EAD7C+301132]\nE       \tBaseThreadInitThunk [0x00007FFC337A257D+29]\nE       \tRtlUserThreadStart [0x00007FFC348CAF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1726209196738, "stop": 1726209206538, "uuid": "917b251f-e24b-4353-a83b-bdf95b0b678b", "historyId": "6109efe96f903dc20f391c57b0ade122", "testCaseId": "6109efe96f903dc20f391c57b0ade122", "fullName": "tests.test.vwoLoginTests.test_vwo_login_pf.TestVWOLogin#test_vwo_login_positive", "labels": [{"name": "feature", "value": "Login Test"}, {"name": "epic", "value": "VWO App"}, {"name": "tag", "value": "qa"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.test.vwoLoginTests"}, {"name": "suite", "value": "test_vwo_login_pf"}, {"name": "subSuite", "value": "TestVWOLogin"}, {"name": "host", "value": "Chaitra"}, {"name": "thread", "value": "20348-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test.vwoLoginTests.test_vwo_login_pf"}]}